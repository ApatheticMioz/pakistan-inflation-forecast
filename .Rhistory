}
cat("\n--- ARIMA Analysis Complete ---\n")
# --- ARIMA Modeling, Forecasting & Evaluation Script (PDF Plots) ---
# --- Set Working Directory ---
# !! IMPORTANT: Make sure this path is the same as in loadData.R !!
base::setwd("D:/work/Semester4/AdvStats/pakistan-inflation-forecast") # Adjust if needed
base::cat(paste("Working directory set to:", base::getwd(), "\n"))
# --- Load Necessary Libraries ---
# Install packages if you haven't already:
# install.packages(c("dplyr", "lubridate", "forecast", "tseries", "ggplot2", "zoo", "gridExtra", "stringr"))
library(dplyr)
library(lubridate)
library(forecast) # For auto.arima, forecast, Arima, checkresiduals, accuracy
library(tseries)  # For adf.test, kpss.test
library(ggplot2)  # For plotting
library(zoo)      # For yearmon/yearqtr functions if needed
library(gridExtra) # For arranging multiple plots (though fallback used)
library(stringr)   # For string manipulation (filename cleaning)
# --- Load the Pre-loaded Data ---
saved_data_filename <- "loaded_dataframes.rds"
base::cat(paste("Loading data from:", saved_data_filename, "\n"))
if (file.exists(saved_data_filename)) {
dataframes_list <- base::readRDS(saved_data_filename)
base::cat("Data loaded successfully.\n")
} else {
stop("Error: Saved data file not found. Please run the modified loadData.R script first.")
}
# --- Configuration ---
# Define the target variables
target_variables <- list(
list(dataset = "inflation_base_2015.csv", seq_no = 10,  short_name = "CPI_YoY_National"),
list(dataset = "inflation_base_2015.csv", seq_no = 210, short_name = "CPI_YoY_NFNE_Urban"),
list(dataset = "inflation_base_2015.csv", seq_no = 330, short_name = "CPI_YoY_Trimmed_Urban"),
list(dataset = "inflation_base_2015.csv", seq_no = 530, short_name = "WPI_YoY_General")
)
date_col_name <- "Observation Date"
value_col_name <- "Observation Value"
series_name_col <- "Series name"
forecast_horizon <- 24 # Number of periods to hold out for testing (e.g., 24 months)
# List to store results (models and accuracy)
analysis_results <- list()
# --- Loop Through Target Variables ---
for (target in target_variables) {
target_dataset_name <- target$dataset
target_series_seq_no <- target$seq_no
target_short_name <- target$short_name
# *** CHANGED: Update output filename extensions to .pdf ***
output_plot_filename <- paste0("arima_residuals_", target_short_name, ".pdf") # Residual plot filename
forecast_plot_filename <- paste0("arima_forecast_vs_actual_", target_short_name, ".pdf") # Forecast plot filename
base::cat(paste0("\n\n", paste(base::rep("=", 80), collapse=""), "\n"))
base::cat(paste("--- Processing Target:", target_short_name, "---\n"))
base::cat(paste0(paste(base::rep("=", 80), collapse=""), "\n"))
# --- Data Preparation ---
base::cat("\n--- Preparing Target Variable ---\n")
if (!target_dataset_name %in% names(dataframes_list)) {
warning(paste("Skipping:", target_short_name, "- Dataset", target_dataset_name, "not found."))
next
}
target_df_data <- dataframes_list[[target_dataset_name]]
target_df <- target_df_data$typed
target_series_df <- target_df %>%
dplyr::filter(`Sequence No.` == target_series_seq_no) %>%
dplyr::select(!!sym(date_col_name), !!sym(value_col_name), !!sym(series_name_col)) %>%
dplyr::arrange(!!sym(date_col_name))
if (nrow(target_series_df) == 0) {
warning(paste("Skipping:", target_short_name, "- No data found for Sequence No.", target_series_seq_no))
next
}
full_series_name <- unique(target_series_df[[series_name_col]])[1]
if(is.na(full_series_name)) full_series_name <- target_short_name
target_series_df_ts <- target_series_df %>%
dplyr::select(!!sym(date_col_name), !!sym(value_col_name))
start_date <- min(target_series_df_ts[[date_col_name]], na.rm = TRUE)
start_year <- lubridate::year(start_date)
start_month <- lubridate::month(start_date)
target_series_df_ts <- target_series_df_ts %>%
dplyr::mutate(!!sym(value_col_name) := as.numeric(!!sym(value_col_name))) %>%
dplyr::mutate(!!sym(value_col_name) := zoo::na.approx(!!sym(value_col_name), na.rm = FALSE))
if(any(is.na(target_series_df_ts[[value_col_name]]))) {
cat("Warning: NAs still present after interpolation. Trimming NAs.\n")
target_series_df_ts <- na.omit(target_series_df_ts)
start_date <- min(target_series_df_ts[[date_col_name]], na.rm = TRUE)
start_year <- lubridate::year(start_date)
start_month <- lubridate::month(start_date)
}
if (nrow(target_series_df_ts) < forecast_horizon + 12) { # Need enough data for train/test
warning(paste("Skipping:", target_short_name, "- Not enough data points for train/test split."))
next
}
target_ts <- stats::ts(target_series_df_ts[[value_col_name]],
start = c(start_year, start_month),
frequency = 12)
base::cat("Time series object created.\n")
# --- Split Data into Training and Test Sets ---
base::cat("\n--- Splitting Data (Test Horizon =", forecast_horizon, "periods) ---\n")
actual_horizon <- min(forecast_horizon, length(target_ts) - 12)
if (actual_horizon < forecast_horizon) {
cat("Warning: Reducing forecast horizon to", actual_horizon, "due to data length.\n")
}
if (actual_horizon <= 0) {
warning(paste("Skipping:", target_short_name, "- Not enough data for the specified forecast horizon."))
next
}
train_ts <- stats::window(target_ts, end = stats::time(target_ts)[length(target_ts) - actual_horizon])
test_ts <- stats::window(target_ts, start = stats::time(target_ts)[length(target_ts) - actual_horizon + 1])
cat(paste("Training set length:", length(train_ts), "\n"))
cat(paste("Test set length:", length(test_ts), "\n"))
# --- Automated Model Selection & Fitting (on Training Data) ---
base::cat("\n--- Running auto.arima() on Training Data ---\n")
fitted_model <- forecast::auto.arima(
train_ts,
seasonal = TRUE,
stepwise = FALSE,
approximation = FALSE
)
cat("Suggested model by auto.arima() based on training data:\n")
print(fitted_model)
# --- Residual Diagnostics (on Training Data Fit) ---
base::cat("\n--- Checking Residuals of Model Fitted to Training Data ---\n")
tryCatch({
# *** CHANGED: Use pdf() device ***
pdf(output_plot_filename, width = 11, height = 8.5) # Landscape orientation
forecast::checkresiduals(fitted_model)
title(main = paste("Residual Diagnostics:", full_series_name, "\nModel:", forecast:::arima.string(fitted_model)),
line = 3)
dev.off() # Close the PDF device
base::cat(paste("Residual diagnostic plots saved to:", output_plot_filename, "\n"))
}, error = function(e){
cat("Failed to save residual plots:", conditionMessage(e), "\n")
if(names(dev.cur()) == "pdf") dev.off() # Ensure device is closed if error occurred
})
# --- Forecasting ---
base::cat("\n--- Generating Forecasts ---\n")
model_forecast <- forecast::forecast(fitted_model, h = actual_horizon)
# Plot forecast vs actuals
tryCatch({
# *** CHANGED: Use pdf() device ***
pdf(forecast_plot_filename, width = 11, height = 8.5) # Landscape
plot(model_forecast, main=paste("Forecast vs Actuals:", full_series_name))
lines(test_ts, col='red')
legend("topleft", legend=c("Actual", "Forecast", "80% PI", "95% PI"),
col=c("red", "blue", "gray", "darkgray"), lty=c(1,1,2,2), lwd=c(1,1,1,1), cex=0.8) # Added cex for potentially better fit
dev.off() # Close the PDF device
base::cat(paste("Forecast plot saved to:", forecast_plot_filename, "\n"))
}, error = function(e){
cat("Failed to save forecast plot:", conditionMessage(e), "\n")
if(names(dev.cur()) == "pdf") dev.off()
})
# --- Evaluation ---
base::cat("\n--- Evaluating Forecast Accuracy ---\n")
accuracy_metrics <- forecast::accuracy(model_forecast, test_ts)
print(accuracy_metrics)
# Store results
analysis_results[[target_short_name]] <- list(
model_fit_summary = summary(fitted_model),
model_string = forecast:::arima.string(fitted_model),
accuracy = accuracy_metrics,
full_name = full_series_name,
residuals_plot = output_plot_filename,
forecast_plot = forecast_plot_filename
)
} # End of loop through target variables
# --- ARIMA Modeling, Forecasting & Evaluation Script (PDF Plots) ---
# --- Set Working Directory ---
# !! IMPORTANT: Make sure this path is the same as in loadData.R !!
base::setwd("D:/work/Semester4/AdvStats/pakistan-inflation-forecast") # Adjust if needed
base::cat(paste("Working directory set to:", base::getwd(), "\n"))
# --- Load Necessary Libraries ---
# Install packages if you haven't already:
# install.packages(c("dplyr", "lubridate", "forecast", "tseries", "ggplot2", "zoo", "gridExtra", "stringr"))
library(dplyr)
library(lubridate)
library(forecast) # For auto.arima, forecast, Arima, checkresiduals, accuracy
library(tseries)  # For adf.test, kpss.test
library(ggplot2)  # For plotting
library(zoo)      # For yearmon/yearqtr functions if needed
library(gridExtra) # For arranging multiple plots (though fallback used)
library(stringr)   # For string manipulation (filename cleaning)
# --- Load the Pre-loaded Data ---
saved_data_filename <- "loaded_dataframes.rds"
base::cat(paste("Loading data from:", saved_data_filename, "\n"))
if (file.exists(saved_data_filename)) {
dataframes_list <- base::readRDS(saved_data_filename)
base::cat("Data loaded successfully.\n")
} else {
stop("Error: Saved data file not found. Please run the modified loadData.R script first.")
}
# --- Configuration ---
# Define the target variables
target_variables <- list(
list(dataset = "inflation_base_2015.csv", seq_no = 10,  short_name = "CPI_YoY_National"),
list(dataset = "inflation_base_2015.csv", seq_no = 210, short_name = "CPI_YoY_NFNE_Urban"),
list(dataset = "inflation_base_2015.csv", seq_no = 330, short_name = "CPI_YoY_Trimmed_Urban"),
list(dataset = "inflation_base_2015.csv", seq_no = 530, short_name = "WPI_YoY_General")
)
date_col_name <- "Observation Date"
value_col_name <- "Observation Value"
series_name_col <- "Series name"
forecast_horizon <- 24 # Number of periods to hold out for testing (e.g., 24 months)
# List to store results (models and accuracy)
analysis_results <- list()
# --- Loop Through Target Variables ---
for (target in target_variables) {
target_dataset_name <- target$dataset
target_series_seq_no <- target$seq_no
target_short_name <- target$short_name
# *** CHANGED: Update output filename extensions to .pdf ***
output_plot_filename <- paste0("arima_residuals_", target_short_name, ".pdf") # Residual plot filename
forecast_plot_filename <- paste0("arima_forecast_vs_actual_", target_short_name, ".pdf") # Forecast plot filename
base::cat(paste0("\n\n", paste(base::rep("=", 80), collapse=""), "\n"))
base::cat(paste("--- Processing Target:", target_short_name, "---\n"))
base::cat(paste0(paste(base::rep("=", 80), collapse=""), "\n"))
# --- Data Preparation ---
base::cat("\n--- Preparing Target Variable ---\n")
if (!target_dataset_name %in% names(dataframes_list)) {
warning(paste("Skipping:", target_short_name, "- Dataset", target_dataset_name, "not found."))
next
}
target_df_data <- dataframes_list[[target_dataset_name]]
target_df <- target_df_data$typed
target_series_df <- target_df %>%
dplyr::filter(`Sequence No.` == target_series_seq_no) %>%
dplyr::select(!!sym(date_col_name), !!sym(value_col_name), !!sym(series_name_col)) %>%
dplyr::arrange(!!sym(date_col_name))
if (nrow(target_series_df) == 0) {
warning(paste("Skipping:", target_short_name, "- No data found for Sequence No.", target_series_seq_no))
next
}
full_series_name <- unique(target_series_df[[series_name_col]])[1]
if(is.na(full_series_name)) full_series_name <- target_short_name
target_series_df_ts <- target_series_df %>%
dplyr::select(!!sym(date_col_name), !!sym(value_col_name))
start_date <- min(target_series_df_ts[[date_col_name]], na.rm = TRUE)
start_year <- lubridate::year(start_date)
start_month <- lubridate::month(start_date)
target_series_df_ts <- target_series_df_ts %>%
dplyr::mutate(!!sym(value_col_name) := as.numeric(!!sym(value_col_name))) %>%
dplyr::mutate(!!sym(value_col_name) := zoo::na.approx(!!sym(value_col_name), na.rm = FALSE))
if(any(is.na(target_series_df_ts[[value_col_name]]))) {
cat("Warning: NAs still present after interpolation. Trimming NAs.\n")
target_series_df_ts <- na.omit(target_series_df_ts)
start_date <- min(target_series_df_ts[[date_col_name]], na.rm = TRUE)
start_year <- lubridate::year(start_date)
start_month <- lubridate::month(start_date)
}
if (nrow(target_series_df_ts) < forecast_horizon + 12) { # Need enough data for train/test
warning(paste("Skipping:", target_short_name, "- Not enough data points for train/test split."))
next
}
target_ts <- stats::ts(target_series_df_ts[[value_col_name]],
start = c(start_year, start_month),
frequency = 12)
base::cat("Time series object created.\n")
# --- Split Data into Training and Test Sets ---
base::cat("\n--- Splitting Data (Test Horizon =", forecast_horizon, "periods) ---\n")
actual_horizon <- min(forecast_horizon, length(target_ts) - 12)
if (actual_horizon < forecast_horizon) {
cat("Warning: Reducing forecast horizon to", actual_horizon, "due to data length.\n")
}
if (actual_horizon <= 0) {
warning(paste("Skipping:", target_short_name, "- Not enough data for the specified forecast horizon."))
next
}
train_ts <- stats::window(target_ts, end = stats::time(target_ts)[length(target_ts) - actual_horizon])
test_ts <- stats::window(target_ts, start = stats::time(target_ts)[length(target_ts) - actual_horizon + 1])
cat(paste("Training set length:", length(train_ts), "\n"))
cat(paste("Test set length:", length(test_ts), "\n"))
# --- Automated Model Selection & Fitting (on Training Data) ---
base::cat("\n--- Running auto.arima() on Training Data ---\n")
fitted_model <- forecast::auto.arima(
train_ts,
seasonal = TRUE,
stepwise = FALSE,
approximation = FALSE
)
cat("Suggested model by auto.arima() based on training data:\n")
print(fitted_model)
# --- Residual Diagnostics (on Training Data Fit) ---
base::cat("\n--- Checking Residuals of Model Fitted to Training Data ---\n")
tryCatch({
# *** CHANGED: Use pdf() device ***
pdf(output_plot_filename, width = 11, height = 8.5) # Landscape orientation
forecast::checkresiduals(fitted_model)
title(main = paste("Residual Diagnostics:", full_series_name, "\nModel:", forecast:::arima.string(fitted_model)),
line = 3)
dev.off() # Close the PDF device
base::cat(paste("Residual diagnostic plots saved to:", output_plot_filename, "\n"))
}, error = function(e){
cat("Failed to save residual plots:", conditionMessage(e), "\n")
if(names(dev.cur()) == "pdf") dev.off() # Ensure device is closed if error occurred
})
# --- Forecasting ---
base::cat("\n--- Generating Forecasts ---\n")
model_forecast <- forecast::forecast(fitted_model, h = actual_horizon)
# Plot forecast vs actuals
tryCatch({
# *** CHANGED: Use pdf() device ***
pdf(forecast_plot_filename, width = 11, height = 8.5) # Landscape
plot(model_forecast, main=paste("Forecast vs Actuals:", full_series_name))
lines(test_ts, col='red')
legend("topleft", legend=c("Actual", "Forecast", "80% PI", "95% PI"),
col=c("red", "blue", "gray", "darkgray"), lty=c(1,1,2,2), lwd=c(1,1,1,1), cex=0.8) # Added cex for potentially better fit
dev.off() # Close the PDF device
base::cat(paste("Forecast plot saved to:", forecast_plot_filename, "\n"))
}, error = function(e){
cat("Failed to save forecast plot:", conditionMessage(e), "\n")
if(names(dev.cur()) == "pdf") dev.off()
})
# --- Evaluation ---
base::cat("\n--- Evaluating Forecast Accuracy ---\n")
accuracy_metrics <- forecast::accuracy(model_forecast, test_ts)
print(accuracy_metrics)
# Store results
analysis_results[[target_short_name]] <- list(
model_fit_summary = summary(fitted_model),
model_string = forecast:::arima.string(fitted_model),
accuracy = accuracy_metrics,
full_name = full_series_name,
residuals_plot = output_plot_filename,
forecast_plot = forecast_plot_filename
)
} # End of loop through target variables
# --- Summary of Results ---
cat("\n\n", paste(base::rep("=", 80), collapse=""), "\n")
cat("--- Summary of ARIMA Model Fitting and Evaluation ---\n")
cat(paste("--- Test Set Horizon:", forecast_horizon, "periods ---"))
cat("\n", paste(base::rep("=", 80), collapse=""), "\n\n")
for (name in names(analysis_results)) {
cat("Target Variable:", analysis_results[[name]]$full_name, "(", name, ")\n")
cat("Selected Model (on Training Data):", analysis_results[[name]]$model_string, "\n")
cat("Accuracy Metrics on Test Set:\n")
print(analysis_results[[name]]$accuracy[2, , drop = FALSE])
cat("Residual Diagnostics Plot:", analysis_results[[name]]$residuals_plot, "\n")
cat("Forecast vs Actuals Plot:", analysis_results[[name]]$forecast_plot, "\n")
cat("--------------------------------------------------------------------------------\n")
}
cat("\n--- ARIMA Analysis Complete ---\n")
# --- ARIMA Modeling, Forecasting & Evaluation Script (PDF Plots) ---
# --- Set Working Directory ---
# !! IMPORTANT: Make sure this path is the same as in loadData.R !!
base::setwd("D:/work/Semester4/AdvStats/pakistan-inflation-forecast") # Adjust if needed
base::cat(paste("Working directory set to:", base::getwd(), "\n"))
# --- Load Necessary Libraries ---
# Install packages if you haven't already:
# install.packages(c("dplyr", "lubridate", "forecast", "tseries", "ggplot2", "zoo", "gridExtra", "stringr"))
library(dplyr)
library(lubridate)
library(forecast) # For auto.arima, forecast, Arima, checkresiduals, accuracy
library(tseries)  # For adf.test, kpss.test
library(ggplot2)  # For plotting
library(zoo)      # For yearmon/yearqtr functions if needed
library(gridExtra) # For arranging multiple plots (though fallback used)
library(stringr)   # For string manipulation (filename cleaning)
# --- Load the Pre-loaded Data ---
saved_data_filename <- "loaded_dataframes.rds"
base::cat(paste("Loading data from:", saved_data_filename, "\n"))
if (file.exists(saved_data_filename)) {
dataframes_list <- base::readRDS(saved_data_filename)
base::cat("Data loaded successfully.\n")
} else {
stop("Error: Saved data file not found. Please run the modified loadData.R script first.")
}
# --- Configuration ---
# Define the target variables
target_variables <- list(
list(dataset = "inflation_base_2015.csv", seq_no = 10,  short_name = "CPI_YoY_National"),
list(dataset = "inflation_base_2015.csv", seq_no = 210, short_name = "CPI_YoY_NFNE_Urban"),
list(dataset = "inflation_base_2015.csv", seq_no = 330, short_name = "CPI_YoY_Trimmed_Urban"),
list(dataset = "inflation_base_2015.csv", seq_no = 530, short_name = "WPI_YoY_General")
)
date_col_name <- "Observation Date"
value_col_name <- "Observation Value"
series_name_col <- "Series name"
forecast_horizon <- 24 # Number of periods to hold out for testing (e.g., 24 months)
# List to store results (models and accuracy)
analysis_results <- list()
# --- Loop Through Target Variables ---
for (target in target_variables) {
target_dataset_name <- target$dataset
target_series_seq_no <- target$seq_no
target_short_name <- target$short_name
# *** CHANGED: Update output filename extensions to .pdf ***
output_plot_filename <- paste0("Plots/arima_residuals_", target_short_name, ".pdf") # Residual plot filename
forecast_plot_filename <- paste0("Plots/arima_forecast_vs_actual_", target_short_name, ".pdf") # Forecast plot filename
base::cat(paste0("\n\n", paste(base::rep("=", 80), collapse=""), "\n"))
base::cat(paste("--- Processing Target:", target_short_name, "---\n"))
base::cat(paste0(paste(base::rep("=", 80), collapse=""), "\n"))
# --- Data Preparation ---
base::cat("\n--- Preparing Target Variable ---\n")
if (!target_dataset_name %in% names(dataframes_list)) {
warning(paste("Skipping:", target_short_name, "- Dataset", target_dataset_name, "not found."))
next
}
target_df_data <- dataframes_list[[target_dataset_name]]
target_df <- target_df_data$typed
target_series_df <- target_df %>%
dplyr::filter(`Sequence No.` == target_series_seq_no) %>%
dplyr::select(!!sym(date_col_name), !!sym(value_col_name), !!sym(series_name_col)) %>%
dplyr::arrange(!!sym(date_col_name))
if (nrow(target_series_df) == 0) {
warning(paste("Skipping:", target_short_name, "- No data found for Sequence No.", target_series_seq_no))
next
}
full_series_name <- unique(target_series_df[[series_name_col]])[1]
if(is.na(full_series_name)) full_series_name <- target_short_name
target_series_df_ts <- target_series_df %>%
dplyr::select(!!sym(date_col_name), !!sym(value_col_name))
start_date <- min(target_series_df_ts[[date_col_name]], na.rm = TRUE)
start_year <- lubridate::year(start_date)
start_month <- lubridate::month(start_date)
target_series_df_ts <- target_series_df_ts %>%
dplyr::mutate(!!sym(value_col_name) := as.numeric(!!sym(value_col_name))) %>%
dplyr::mutate(!!sym(value_col_name) := zoo::na.approx(!!sym(value_col_name), na.rm = FALSE))
if(any(is.na(target_series_df_ts[[value_col_name]]))) {
cat("Warning: NAs still present after interpolation. Trimming NAs.\n")
target_series_df_ts <- na.omit(target_series_df_ts)
start_date <- min(target_series_df_ts[[date_col_name]], na.rm = TRUE)
start_year <- lubridate::year(start_date)
start_month <- lubridate::month(start_date)
}
if (nrow(target_series_df_ts) < forecast_horizon + 12) { # Need enough data for train/test
warning(paste("Skipping:", target_short_name, "- Not enough data points for train/test split."))
next
}
target_ts <- stats::ts(target_series_df_ts[[value_col_name]],
start = c(start_year, start_month),
frequency = 12)
base::cat("Time series object created.\n")
# --- Split Data into Training and Test Sets ---
base::cat("\n--- Splitting Data (Test Horizon =", forecast_horizon, "periods) ---\n")
actual_horizon <- min(forecast_horizon, length(target_ts) - 12)
if (actual_horizon < forecast_horizon) {
cat("Warning: Reducing forecast horizon to", actual_horizon, "due to data length.\n")
}
if (actual_horizon <= 0) {
warning(paste("Skipping:", target_short_name, "- Not enough data for the specified forecast horizon."))
next
}
train_ts <- stats::window(target_ts, end = stats::time(target_ts)[length(target_ts) - actual_horizon])
test_ts <- stats::window(target_ts, start = stats::time(target_ts)[length(target_ts) - actual_horizon + 1])
cat(paste("Training set length:", length(train_ts), "\n"))
cat(paste("Test set length:", length(test_ts), "\n"))
# --- Automated Model Selection & Fitting (on Training Data) ---
base::cat("\n--- Running auto.arima() on Training Data ---\n")
fitted_model <- forecast::auto.arima(
train_ts,
seasonal = TRUE,
stepwise = FALSE,
approximation = FALSE
)
cat("Suggested model by auto.arima() based on training data:\n")
print(fitted_model)
# --- Residual Diagnostics (on Training Data Fit) ---
base::cat("\n--- Checking Residuals of Model Fitted to Training Data ---\n")
tryCatch({
# *** CHANGED: Use pdf() device ***
pdf(output_plot_filename, width = 11, height = 8.5) # Landscape orientation
forecast::checkresiduals(fitted_model)
title(main = paste("Residual Diagnostics:", full_series_name, "\nModel:", forecast:::arima.string(fitted_model)),
line = 3)
dev.off() # Close the PDF device
base::cat(paste("Residual diagnostic plots saved to:", output_plot_filename, "\n"))
}, error = function(e){
cat("Failed to save residual plots:", conditionMessage(e), "\n")
if(names(dev.cur()) == "pdf") dev.off() # Ensure device is closed if error occurred
})
# --- Forecasting ---
base::cat("\n--- Generating Forecasts ---\n")
model_forecast <- forecast::forecast(fitted_model, h = actual_horizon)
# Plot forecast vs actuals
tryCatch({
# *** CHANGED: Use pdf() device ***
pdf(forecast_plot_filename, width = 11, height = 8.5) # Landscape
plot(model_forecast, main=paste("Forecast vs Actuals:", full_series_name))
lines(test_ts, col='red')
legend("topleft", legend=c("Actual", "Forecast", "80% PI", "95% PI"),
col=c("red", "blue", "gray", "darkgray"), lty=c(1,1,2,2), lwd=c(1,1,1,1), cex=0.8) # Added cex for potentially better fit
dev.off() # Close the PDF device
base::cat(paste("Forecast plot saved to:", forecast_plot_filename, "\n"))
}, error = function(e){
cat("Failed to save forecast plot:", conditionMessage(e), "\n")
if(names(dev.cur()) == "pdf") dev.off()
})
# --- Evaluation ---
base::cat("\n--- Evaluating Forecast Accuracy ---\n")
accuracy_metrics <- forecast::accuracy(model_forecast, test_ts)
print(accuracy_metrics)
# Store results
analysis_results[[target_short_name]] <- list(
model_fit_summary = summary(fitted_model),
model_string = forecast:::arima.string(fitted_model),
accuracy = accuracy_metrics,
full_name = full_series_name,
residuals_plot = output_plot_filename,
forecast_plot = forecast_plot_filename
)
} # End of loop through target variables
# --- Summary of Results ---
cat("\n\n", paste(base::rep("=", 80), collapse=""), "\n")
cat("--- Summary of ARIMA Model Fitting and Evaluation ---\n")
cat(paste("--- Test Set Horizon:", forecast_horizon, "periods ---"))
cat("\n", paste(base::rep("=", 80), collapse=""), "\n\n")
for (name in names(analysis_results)) {
cat("Target Variable:", analysis_results[[name]]$full_name, "(", name, ")\n")
cat("Selected Model (on Training Data):", analysis_results[[name]]$model_string, "\n")
cat("Accuracy Metrics on Test Set:\n")
print(analysis_results[[name]]$accuracy[2, , drop = FALSE])
cat("Residual Diagnostics Plot:", analysis_results[[name]]$residuals_plot, "\n")
cat("Forecast vs Actuals Plot:", analysis_results[[name]]$forecast_plot, "\n")
cat("--------------------------------------------------------------------------------\n")
}
cat("\n--- ARIMA Analysis Complete ---\n")
